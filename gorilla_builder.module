<?php

/**
 * Gorilla Builder is a Drupal specific implementation of the Mailchimp API
 * It provides a toolbox with ready to go functions and hooks for you to use in your
 * own Mailchimp module. Gorilla Builder also handles errors.
 * 
 * This is something very 
 */

/**
 * Implements hook_menu().
 */
function gorilla_builder_menu() {
  $items = array();

  $items['admin/settings/gorilla'] = array(
    'title' => 'Gorilla Builder',
    'description' => 'Manage Gorilla API settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('gorilla_general_settings'),
    'access arguments' => array('administer gorilla builder'),
    'access callback' => TRUE,
    'file' => 'gorilla.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_help().
 */
function gorilla_builder_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/gorilla' :
    case 'admin/help#gorilla_builder' :
      return '<p>'. t('Gorilla Builder is a Mailchimp toolbox for Drupal developers.') .'</p>';
  }
}

/**
 * A factory function returning a cached instance of type Gorilla
 * @param reset
 *  Set to TRUE if you want to reset the cache
 * @return Gorilla
 *  The cached mcapi instance you want ot (re)use
 */
function _gorilla_factory($reset = FALSE) {
  static $cache;
  
  module_load_include('inc', 'gorilla_builder', 'MCAPI.class');
  module_load_include('inc', 'gorilla_builder', 'Gorilla.class');
  module_load_include('inc', 'gorilla_builder', 'GorillaException.class');
  
  if ((!$cache) || $reset) {
    $api_key = variable_get('gorilla_api_key', '');
    $gorilla = new Gorilla($api_key);
    $cache = $gorilla;
  }
  
  return $cache;
}

/**
 * Gets you an instance of GorillaCampaign.
 * @return GorillaCampaign
 */
function gorilla_get_new_campaign() {
  module_load_include('inc', 'gorilla_builder', 'GorillaException.class');
  module_load_include('inc', 'gorilla_builder', 'GorillaCampaign.class');
  
  $campaign = new GorillaCampaign();
  return $campaign;
}

/**
 * Returns a list of all lists associated with your account. Or a singe list
 * if you specify its' list ID
 * @param integer $lid (optional)
 *   The list id
 * @return mixed
 *   A structured array or FALSE if an error was thrown
 */
function gorilla_list_lists($lid) {
  $lists = array();

  try {
   $gorilla = _gorilla_factory();
   $lists = $gorilla->lists();
  } catch (GorillaException $e) {
    $vars = array(
      'errorcode' => $e->getErrorCode(),
      'errormsg' => $e->getErrorMessage(),
    );
    watchdog('gorilla_builder', 'We failed to retrieve a list of available lists for your account: %errormsg (%errorcode)', $vars, WATCHDOG_ERROR);;
    return FALSE;
  }

  if ($lid) {
    foreach ($lists as $list) {
      if ($list['id'] == $lid) {
        return $list;
      }
    }
  }
  
  return $lists;
}

/**
 * Creates a new campaign
 * @param title
 *  The title you want to use in the newsletter
 * @param subject
 *  The subject of the mail
 * @param content
 *  A structured array with the rendered content
 * @param template_id
 *  The id of the template you want to use
 * @return
 *  The cid of the newly created Mailchimp campaign. FALSE if an error occurs.
 */
function gorilla_create_campaign(GorillaCampaign $campaign) {
  try {
   $gorilla = _gorilla_factory();
 
   // hook_gorilla_campaign(&$campaign)
   drupal_alter('gorilla_campaign', $campaign);
   
   $cid = $gorilla->campaignCreate($campaign->type, $campaign->options, $campaign->content);

   return $cid;
  } catch (GorillaException $e) {
    $vars = array(
      'errorcode' => $e->getErrorCode(),
      'errormsg' => $e->getErrorMessage(),
    );
    watchdog('gorilla_builder', 'We failed to create a new campaign: %errormsg (%errorcode)', $vars, WATCHDOG_ERROR);
  }
  return FALSE;
}

/**
 * Fetch a list of interest groups for a given list id
 * @param lid
 *  The list id
 * @return array
 *  A structured array of data about interests groups
 *  FALSE if an error was thrown
 */
function gorilla_list_interest_groups($lid) {
  try {
   $gorilla = _gorilla_factory();
   return $gorilla->list_interesting_groups($lid);
  } catch (GorillaException $e) {
    $vars = array(
      'lid' => $lid,
      'errorcode' => $e->getErrorCode(),
      'errormsg' => $e->getErrorMessage(),
    );
    watchdog('gorilla_builder', 'We failed to fetch the interests groups for id %lid: %errormsg (%errorcode)', $vars, WATCHDOG_ERROR);
  }
}

/**
 * Fetch all campaign templates defined for you your account (API key)
 * @param tid
 *  A specific template id if you want to fetch the data of a specific template
 * @return array
 *  A structured array containing data of either a single template, or an array of templates
 *  returns false if it throws an error
 */
function gorilla_campaign_templates($tid = NULL) {
  $templates = array();

  try {
   $gorilla = _gorilla_factory();
   $templates = $gorilla->campaignTemplates();
  } catch (GorillaException $e) {
    $vars = array(
      'errorcode' => $e->getErrorCode(),
      'errormsg' => $e->getErrorMessage(),
    );
    watchdog('gorilla_builder', 'We failed to retrieve a list of available templates: %errormsg (%errorcode).', $vars, WATCHDOG_ERROR);;
    return FALSE;
  }

  if ($tid) {
    foreach ($templates as $template) {
      if ($template['id'] == $tid) {
        return $template;
      }
    }
  }
  
  return $templates;  
}

/**
 * Sends the campaign away. This function only works after gorilla_create_campaign()
 * @return TRUE if success. FALSE if you didn't create a campaign first. Throws an exception if an error occurs.
 */
function gorilla_send_campaign($cid = NULL) {
  try {
    $gorilla = _gorilla_factory();
    return $gorilla->campaignSendNow($cid);
  } catch (GorillaException $e) {
    $vars = array(
      'cid' => $cid,
      'errorcode' => $e->getErrorCode(),
      'errormsg' => $e->getErrorMessage(),
    );
    watchdog('gorilla_builder', 'We failed to send the campaign with id %cid: %errormsg (%errorcode)', $vars, WATCHDOG_ERROR);
  }
  return FALSE;
}
